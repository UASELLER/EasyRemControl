package com.example.easyremcontrol.ui.screens

import android.content.Context
import android.os.Environment
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.jcraft.jsch.*
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import com.example.easyremcontrol.ui.models.Server
import java.util.Vector
import androidx.compose.foundation.clickable
import androidx.compose.foundation.background
import androidx.compose.ui.graphics.Color
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.runtime.Composable
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SFTPClientScreen(
    selectedServer: Server?,  // nullable —Ç–∏–ø
    context: Context,
    onBackPress: () -> Unit   // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
) {
    var currentPath by remember { mutableStateOf("/") }  // –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    var fileList by remember { mutableStateOf(listOf<String>()) }
    var selectedFiles by remember { mutableStateOf<Set<String>>(emptySet()) }  // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    val coroutineScope = rememberCoroutineScope()

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    LaunchedEffect(currentPath, selectedServer) {
        selectedServer?.let { server ->  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ selectedServer –Ω–µ null
            val files = connectAndListFiles(server, currentPath)
            fileList = files
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("SFTP Client") },
                navigationIcon = {
                    IconButton(onClick = { onBackPress() }) {  // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                        Icon(
                            imageVector = Icons.Filled.ArrowBack,
                            contentDescription = "Back"
                        )
                    }
                }
            )
        },
        content = { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // –ü—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                Text("–ü—É—Ç—å: $currentPath")

                Spacer(modifier = Modifier.height(8.dp))

                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                if (currentPath != "/") {
                    Button(onClick = {
                        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                        currentPath = currentPath.substringBeforeLast("/")
                        if (currentPath.isEmpty()) currentPath = "/"
                    }) {
                        Text("–ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ")
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
                LazyColumn {
                    items(fileList) { fileName ->
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .background(if (selectedFiles.contains(fileName)) Color.LightGray else Color.Transparent)
                                .clickable {
                                    if (fileName.endsWith("/")) {
                                        // –ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä—å –ø–∞–ø–∫–∏
                                        currentPath = "$currentPath/$fileName".removeSuffix("/")
                                    } else {
                                        // –í—ã–±–∏—Ä–∞–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                                        if (selectedFiles.contains(fileName)) {
                                            selectedFiles = selectedFiles - fileName
                                        } else {
                                            selectedFiles = selectedFiles + fileName
                                        }
                                    }
                                }
                                .padding(8.dp)
                        ) {
                            Text(
                                text = if (fileName.endsWith("/")) "üìÅ $fileName" else "üìÑ $fileName",
                                modifier = Modifier.weight(1f)
                            )
                        }
                    }
                }

                // –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
                if (selectedFiles.isNotEmpty()) {
                    Spacer(modifier = Modifier.height(16.dp))

                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Button(onClick = {
                            coroutineScope.launch {
                                selectedServer?.let { server ->
                                    selectedFiles.forEach { file ->
                                        downloadFileFromServer(server, "$currentPath/$file", context)
                                    }
                                    selectedFiles = emptySet() // –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                                }
                            }
                        }) {
                            Text("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
                        }

                        Button(onClick = {
                            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                        }) {
                            Text("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
                        }

                        Button(onClick = {
                            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
                        }) {
                            Text("–í—Å—Ç–∞–≤–∏—Ç—å")
                        }

                        Button(onClick = {
                            // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                            selectedFiles = emptySet() // –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                        }) {
                            Text("–£–¥–∞–ª–∏—Ç—å")
                        }
                    }
                }
            }
        }
    )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
suspend fun connectAndListFiles(server: Server, path: String): List<String> {
    return withContext(Dispatchers.IO) {
        try {
            val jsch = JSch()
            val session = jsch.getSession(server.username, server.ip, 22)
            session.setPassword(server.password)
            session.setConfig("StrictHostKeyChecking", "no")
            session.connect()

            val channel = session.openChannel("sftp") as ChannelSftp
            channel.connect()

            val files = channel.ls(path) as Vector<ChannelSftp.LsEntry>
            channel.disconnect()
            session.disconnect()

            files.map { if (it.attrs.isDir) "${it.filename}/" else it.filename }
        } catch (e: Exception) {
            e.printStackTrace()
            emptyList()
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
suspend fun downloadFileFromServer(server: Server, remoteFilePath: String, context: Context) {
    withContext(Dispatchers.IO) {
        try {
            val jsch = JSch()
            val session = jsch.getSession(server.username, server.ip, 22)
            session.setPassword(server.password)
            session.setConfig("StrictHostKeyChecking", "no")
            session.connect()

            val channel = session.openChannel("sftp") as ChannelSftp
            channel.connect()

            // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            val localFilePath = "${context.filesDir}/$remoteFilePath"
            channel.get(remoteFilePath, localFilePath)

            channel.disconnect()
            session.disconnect()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}